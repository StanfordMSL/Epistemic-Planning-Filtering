# -----------------------------------------------------------------------------
# This file was modified after autogenerated by symforce from template:
#     backends/python/templates/function/FUNCTION.py.jinja
# -----------------------------------------------------------------------------

import torch

# pylint: disable=too-many-locals,too-many-lines,too-many-statements,unused-argument

def a_calc(x, u, dt, m, learning_class):
    """
    This function was autogenerated. Do not modify by hand.

    Args:
        x: Matrix91
        u: Matrix41
        dt: Scalar
        m: Scalar

    Outputs:
        A: Matrix9_9
    """

    # Total ops: 70

    # Input arrays

    # Intermediate terms (22)
    _tmp0 = torch.tan(x[4])
    _tmp1 = torch.sin(x[3])
    _tmp2 = _tmp1 * u[3]
    _tmp3 = torch.cos(x[3])
    _tmp4 = _tmp3 * u[2]
    _tmp5 = _tmp3 * u[3]
    _tmp6 = _tmp1 * u[2]
    _tmp7 = torch.cos(x[4])
    _tmp8 = 1.0 / _tmp7
    _tmp9 = torch.sin(x[5])
    _tmp10 = 1.0 * _tmp9
    _tmp11 = torch.sin(x[4])
    _tmp12 = torch.cos(x[5])
    _tmp13 = _tmp11 * _tmp12
    _tmp14 = dt * u[0] / m
    _tmp15 = 1.0 * _tmp12
    _tmp16 = _tmp11 * _tmp9
    _tmp17 = _tmp14 * _tmp7
    _tmp18 = _tmp0**2 + 1
    _tmp19 = 1.0 * _tmp11
    _tmp20 = _tmp19 / _tmp7**2
    _tmp21 = _tmp17 * _tmp3

    # Output terms
    _A = torch.zeros((9, 9)).to(learning_class.device)
    _A[0, 0] = 1
    _A[1, 1] = 1
    _A[2, 2] = 1
    _A[4, 4] = 1
    
    _A[5, 5] = 1
    _A[0, 6] = dt
    _A[6, 6] = 1
    _A[1, 7] = dt
    _A[7, 7] = 1
    _A[2, 8] = dt
    _A[8, 8] = 1

    A1 = torch.zeros((9, 9)).to(learning_class.device)
    A1[3, 3] = 1.0
    _A1 = (dt * (-_tmp0 * _tmp2 + _tmp0 * _tmp4) + 1) * A1

    A2 = torch.zeros((9, 9)).to(learning_class.device)
    A2[4,3] = 1.0
    _A2 = (dt * (-_tmp5 - _tmp6)) * A2

    A3 = torch.zeros((9, 9)).to(learning_class.device)
    A3[5,3] = 1.0
    _A3 = (dt * (-_tmp2 * _tmp8 + _tmp4 * _tmp8))* A3

    A4 = torch.zeros((9, 9)).to(learning_class.device)
    A4[6,3] = 1.0
    _A4 = (_tmp14 * (-_tmp1 * _tmp13 + _tmp10 * _tmp3)) * A4

    A5 = torch.zeros((9, 9)).to(learning_class.device)
    A5[7,3] = 1.0
    _A5 = (_tmp14 * (-_tmp1 * _tmp16 - _tmp15 * _tmp3)) * A5 

    A6 = torch.zeros((9, 9)).to(learning_class.device)
    A6[8,3] = 1.0
    _A6 = (-1.0 * _tmp1 * _tmp17) * A6

    A7 = torch.zeros((9, 9)).to(learning_class.device)
    A7[3,4] = 1.0
    _A7 = (dt * (_tmp18 * _tmp5 + _tmp18 * _tmp6)) * A7 

    A8 = torch.zeros((9, 9)).to(learning_class.device)
    A8[5,4] = 1.0
    _A8 = (dt * (_tmp20 * _tmp5 + _tmp20 * _tmp6)) * A8

    A9 = torch.zeros((9, 9)).to(learning_class.device)
    A9[6,4] = 1.0
    _A9 = (_tmp12 * _tmp21) * A9

    A10 = torch.zeros((9, 9)).to(learning_class.device)
    A10[7,4] = 1.0
    _A10 = (_tmp21 * _tmp9) * A10

    A11 = torch.zeros((9, 9)).to(learning_class.device)
    A11[8,4] = 1.0
    _A11 = (-_tmp14 * _tmp19 * _tmp3) * A11

    A12 = torch.zeros((9, 9)).to(learning_class.device)
    A12[6,5] = 1.0
    _A12 = (_tmp14 * (_tmp1 * _tmp15 - _tmp16 * _tmp3)) * A12

    A13 = torch.zeros((9, 9)).to(learning_class.device)
    A13[7,5] = 1.0
    _A13 = (_tmp14 * (_tmp1 * _tmp10 + _tmp13 * _tmp3)) * A13

    A = _A + _A1 + _A2 + _A3 + _A4 + _A5 + _A6 + _A7 + _A8 +  _A9 + _A10 + _A11 + _A12 + _A13
    return A
